
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/mult_comb_16x16/src/mult_comb_16x16.v
Parsing SystemVerilog input from `/openlane/designs/mult_comb_16x16/src/mult_comb_16x16.v' to AST representation.
Generating RTLIL representation for module `\mult_comb_16x16'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/mult_comb_16x16/runs/first_run/tmp/synthesis/hierarchy.dot'.
Dumping module mult_comb_16x16 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \mult_comb_16x16

3.2. Analyzing design hierarchy..
Top module:  \mult_comb_16x16
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \mult_comb_16x16

5.2. Analyzing design hierarchy..
Top module:  \mult_comb_16x16
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

12. Executing PROC_MUX pass (convert decision trees to multiplexers).

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module mult_comb_16x16...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_comb_16x16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_comb_16x16.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

22.9. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_comb_16x16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_comb_16x16.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 32) from port A of cell mult_comb_16x16.$mul$/openlane/designs/mult_comb_16x16/src/mult_comb_16x16.v:14$1 ($mul).
Removed top 16 bits (of 32) from port B of cell mult_comb_16x16.$mul$/openlane/designs/mult_comb_16x16/src/mult_comb_16x16.v:14$1 ($mul).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mult_comb_16x16:
  creating $macc model for $mul$/openlane/designs/mult_comb_16x16/src/mult_comb_16x16.v:14$1 ($mul).
  creating $macc cell for $mul$/openlane/designs/mult_comb_16x16/src/mult_comb_16x16.v:14$1: $auto$alumacc.cc:365:replace_macc$2
  created 0 $alu and 1 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_comb_16x16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_comb_16x16.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_comb_16x16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_comb_16x16.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add \mplier * \mcand (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~492 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.
<suppressed ~1479 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..
Removed 42 unused cells and 198 unused wires.
<suppressed ~43 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\mult_comb_16x16' to `<abc-temp-dir>/input.blif'..
Extracted 1534 gates and 1566 wires to a netlist network with 32 inputs and 32 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       45
ABC RESULTS:               AND cells:      181
ABC RESULTS:             ORNOT cells:       32
ABC RESULTS:              NAND cells:      122
ABC RESULTS:                OR cells:      191
ABC RESULTS:               NOR cells:       45
ABC RESULTS:            ANDNOT cells:      462
ABC RESULTS:              XNOR cells:      105
ABC RESULTS:               XOR cells:      396
ABC RESULTS:        internal signals:     1502
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       32
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..
Removed 0 unused cells and 230 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \mult_comb_16x16

40.2. Analyzing design hierarchy..
Top module:  \mult_comb_16x16
Removed 0 unused modules.

41. Printing statistics.

=== mult_comb_16x16 ===

   Number of wires:               1553
   Number of wire bits:           1707
   Number of public wires:           6
   Number of public wire bits:     160
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1579
     $_ANDNOT_                     462
     $_AND_                        181
     $_NAND_                       122
     $_NOR_                         45
     $_NOT_                         45
     $_ORNOT_                       32
     $_OR_                         191
     $_XNOR_                       105
     $_XOR_                        396

42. Executing CHECK pass (checking for obvious problems).
Checking module mult_comb_16x16...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/mult_comb_16x16/runs/first_run/tmp/synthesis/post_techmap.dot'.
Dumping module mult_comb_16x16 to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_comb_16x16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_comb_16x16.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_comb_16x16'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_comb_16x16.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

47. Printing statistics.

=== mult_comb_16x16 ===

   Number of wires:               1550
   Number of wire bits:           1611
   Number of public wires:           3
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1579
     $_ANDNOT_                     462
     $_AND_                        181
     $_NAND_                       122
     $_NOR_                         45
     $_NOT_                         45
     $_ORNOT_                       32
     $_OR_                         191
     $_XNOR_                       105
     $_XOR_                        396

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/brunoayala/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/brunoayala/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/brunoayala/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/brunoayala/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mult_comb_16x16':

53. Printing statistics.

=== mult_comb_16x16 ===

   Number of wires:               1550
   Number of wire bits:           1611
   Number of public wires:           3
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1579
     $_ANDNOT_                     462
     $_AND_                        181
     $_NAND_                       122
     $_NOR_                         45
     $_NOT_                         45
     $_ORNOT_                       32
     $_OR_                         191
     $_XNOR_                       105
     $_XOR_                        396

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\mult_comb_16x16' to `/tmp/yosys-abc-NkJrGZ/input.blif'..
Extracted 1579 gates and 1611 wires to a netlist network with 32 inputs and 32 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-NkJrGZ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-NkJrGZ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-NkJrGZ/input.blif 
ABC: + read_lib -w /openlane/designs/mult_comb_16x16/runs/first_run/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.06 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/mult_comb_16x16/runs/first_run/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.09 sec
ABC: Memory =    9.54 MB. Time =     0.09 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/mult_comb_16x16/runs/first_run/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/mult_comb_16x16/runs/first_run/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 100000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 100000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 100000.0 
ABC: Current delay (6029.10 ps) does not exceed the target delay (100000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 100000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1399 (  7.6 %)   Cap = 10.1 ff (  1.9 %)   Area =    13435.39 ( 92.2 %)   Delay =  6483.29 ps  ( 20.8 %)               
ABC: Path  0 --      22 : 0    7 pi                        A =   0.00  Df =  48.3  -27.1 ps  S =  72.8 ps  Cin =  0.0 ff  Cout =  14.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     340 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 395.2 -168.4 ps  S = 419.0 ps  Cin =  2.1 ff  Cout =  35.3 ff  Cmax = 130.0 ff  G = 1594  
ABC: Path  2 --     341 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 737.1 -264.4 ps  S = 344.5 ps  Cin =  2.1 ff  Cout =  29.0 ff  Cmax = 130.0 ff  G = 1319  
ABC: Path  3 --     342 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1129.6 -392.1 ps  S = 424.9 ps  Cin =  2.1 ff  Cout =  36.0 ff  Cmax = 130.0 ff  G = 1653  
ABC: Path  4 --    1224 : 4    2 sky130_fd_sc_hd__a22oi_2  A =  12.51  Df =1265.0 -325.3 ps  S = 131.3 ps  Cin =  4.3 ff  Cout =   3.4 ff  Cmax = 170.3 ff  G =   75  
ABC: Path  5 --    1226 : 4    2 sky130_fd_sc_hd__o2bb2a_2 A =  11.26  Df =1553.0 -334.7 ps  S =  61.0 ps  Cin =  1.8 ff  Cout =   7.1 ff  Cmax = 294.8 ff  G =  384  
ABC: Path  6 --    1228 : 4    4 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =1895.1 -138.8 ps  S =  75.4 ps  Cin =  2.4 ff  Cout =  13.1 ff  Cmax = 325.0 ff  G =  539  
ABC: Path  7 --    1231 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =2106.3 -202.5 ps  S =  58.1 ps  Cin =  2.4 ff  Cout =   8.7 ff  Cmax = 309.5 ff  G =  354  
ABC: Path  8 --    1233 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =2322.8 -167.4 ps  S =  48.2 ps  Cin =  2.4 ff  Cout =   6.6 ff  Cmax = 309.5 ff  G =  270  
ABC: Path  9 --    1234 : 3    4 sky130_fd_sc_hd__and3_2   A =   7.51  Df =2556.5 -159.3 ps  S =  91.7 ps  Cin =  1.5 ff  Cout =  13.4 ff  Cmax = 309.5 ff  G =  852  
ABC: Path 10 --    1236 : 4    4 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3227.5 -595.7 ps  S = 141.8 ps  Cin =  1.5 ff  Cout =  13.2 ff  Cmax = 310.4 ff  G =  850  
ABC: Path 11 --    1238 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =3471.5 -394.2 ps  S =  67.1 ps  Cin =  2.4 ff  Cout =  10.7 ff  Cmax = 309.5 ff  G =  438  
ABC: Path 12 --    1246 : 3    2 sky130_fd_sc_hd__and3_2   A =   7.51  Df =3655.1 -112.6 ps  S =  64.5 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 309.5 ff  G =  454  
ABC: Path 13 --    1249 : 4    2 sky130_fd_sc_hd__o211a_2  A =  10.01  Df =3921.6 -108.1 ps  S =  65.7 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 268.3 ff  G =  285  
ABC: Path 14 --    1254 : 4    2 sky130_fd_sc_hd__o211a_2  A =  10.01  Df =4200.3  -10.6 ps  S =  67.3 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 268.3 ff  G =  285  
ABC: Path 15 --    1257 : 4    2 sky130_fd_sc_hd__o211a_2  A =  10.01  Df =4459.5   -4.8 ps  S =  62.6 ps  Cin =  2.4 ff  Cout =   6.3 ff  Cmax = 268.3 ff  G =  249  
ABC: Path 16 --    1258 : 2    2 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =4607.2  -59.9 ps  S = 173.0 ps  Cin =  4.4 ff  Cout =  13.7 ff  Cmax = 141.9 ff  G =  296  
ABC: Path 17 --    1298 : 2    2 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =4683.5  -47.6 ps  S =  55.1 ps  Cin =  4.4 ff  Cout =   6.2 ff  Cmax = 295.7 ff  G =  131  
ABC: Path 18 --    1299 : 3    1 sky130_fd_sc_hd__or3_2    A =   7.51  Df =5082.1 -347.3 ps  S =  73.5 ps  Cin =  1.5 ff  Cout =   2.6 ff  Cmax = 310.4 ff  G =  158  
ABC: Path 19 --    1303 : 3    4 sky130_fd_sc_hd__o21a_2   A =   8.76  Df =5321.9  -14.1 ps  S = 106.2 ps  Cin =  2.4 ff  Cout =  17.8 ff  Cmax = 294.8 ff  G =  720  
ABC: Path 20 --    1430 : 4    3 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =5713.9 -197.6 ps  S = 111.7 ps  Cin =  2.3 ff  Cout =  17.9 ff  Cmax = 285.7 ff  G =  722  
ABC: Path 21 --    1456 : 4    2 sky130_fd_sc_hd__o31ai_2  A =  12.51  Df =6032.8 -420.2 ps  S = 304.5 ps  Cin =  4.4 ff  Cout =  11.0 ff  Cmax =  80.6 ff  G =  240  
ABC: Path 22 --    1457 : 2    1 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =6483.3 -653.0 ps  S = 427.9 ps  Cin =  8.6 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G =  390  
ABC: Start-point = pi21 (\mcand [10]).  End-point = po28 (\product [30]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   32/   32  lat =    0  nd =  1399  edge =   3904  area =13437.07  delay =23.00  lev = 23
ABC: + write_blif /tmp/yosys-abc-NkJrGZ/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o32ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       68
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       54
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      104
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       92
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:      112
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       46
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       94
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       94
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       68
ABC RESULTS:        internal signals:     1547
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       32
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_comb_16x16..
Removed 0 unused cells and 1611 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module mult_comb_16x16...
Warning: Wire mult_comb_16x16.\product [31] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [30] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [29] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [28] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [27] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [26] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [25] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [24] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [23] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [22] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [21] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [20] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [19] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [18] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [17] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [16] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [15] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [14] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [13] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [12] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [11] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [10] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [9] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [8] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [7] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [6] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [5] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [4] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [3] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [2] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [1] is used but has no driver.
Warning: Wire mult_comb_16x16.\product [0] is used but has no driver.
Found and reported 32 problems.

61. Printing statistics.

=== mult_comb_16x16 ===

   Number of wires:               1370
   Number of wire bits:           1431
   Number of public wires:           3
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1399
     sky130_fd_sc_hd__a211o_2       31
     sky130_fd_sc_hd__a211oi_2      21
     sky130_fd_sc_hd__a21bo_2       47
     sky130_fd_sc_hd__a21boi_2       7
     sky130_fd_sc_hd__a21o_2       104
     sky130_fd_sc_hd__a21oi_2       47
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2        68
     sky130_fd_sc_hd__a22oi_2       33
     sky130_fd_sc_hd__a2bb2o_2       4
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2        15
     sky130_fd_sc_hd__a31oi_2        5
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a32oi_2        3
     sky130_fd_sc_hd__and2_2        50
     sky130_fd_sc_hd__and2b_2       38
     sky130_fd_sc_hd__and3_2        54
     sky130_fd_sc_hd__and3b_2        3
     sky130_fd_sc_hd__and4_2        46
     sky130_fd_sc_hd__and4b_2        5
     sky130_fd_sc_hd__and4bb_2       8
     sky130_fd_sc_hd__buf_1         94
     sky130_fd_sc_hd__inv_2         13
     sky130_fd_sc_hd__nand2_2       94
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2       92
     sky130_fd_sc_hd__nand4_2       50
     sky130_fd_sc_hd__nor2_2        68
     sky130_fd_sc_hd__nor3_2         9
     sky130_fd_sc_hd__nor3b_2        5
     sky130_fd_sc_hd__nor4_2         3
     sky130_fd_sc_hd__nor4b_2        1
     sky130_fd_sc_hd__o2111a_2       2
     sky130_fd_sc_hd__o211a_2       27
     sky130_fd_sc_hd__o211ai_2      24
     sky130_fd_sc_hd__o21a_2        17
     sky130_fd_sc_hd__o21ai_2       18
     sky130_fd_sc_hd__o21ba_2       20
     sky130_fd_sc_hd__o21bai_2       4
     sky130_fd_sc_hd__o22a_2         3
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2      10
     sky130_fd_sc_hd__o31a_2         3
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32ai_2        1
     sky130_fd_sc_hd__or2_2         33
     sky130_fd_sc_hd__or2b_2        21
     sky130_fd_sc_hd__or3_2         16
     sky130_fd_sc_hd__or3b_2         5
     sky130_fd_sc_hd__or4_2          3
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__or4bb_2        2
     sky130_fd_sc_hd__xnor2_2      112
     sky130_fd_sc_hd__xor2_2        49

   Chip area for module '\mult_comb_16x16': 13435.385600

62. Executing Verilog backend.
Dumping module `\mult_comb_16x16'.

Warnings: 32 unique messages, 32 total
End of script. Logfile hash: d4be471f4a, CPU: user 1.34s system 0.01s, MEM: 32.48 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 75% 2x abc (3 sec), 5% 2x write_verilog (0 sec), ...
